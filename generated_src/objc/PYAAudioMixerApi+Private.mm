// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_mixer.djinni

#import "PYAAudioMixerApi+Private.h"
#import "PYAAudioMixerApi.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "PYAMixerConfig+Private.h"
#import "PYAMixerSource+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface PYAAudioMixerApi ()

- (id)initWithCpp:(const std::shared_ptr<::audio_mixer::AudioMixerApi>&)cppRef;

@end

@implementation PYAAudioMixerApi {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::audio_mixer::AudioMixerApi>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::audio_mixer::AudioMixerApi>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable PYAAudioMixerApi *)create:(nonnull PYAMixerConfig *)config {
    try {
        auto objcpp_result_ = ::audio_mixer::AudioMixerApi::Create(::djinni_generated::MixerConfig::toCpp(config));
        return ::djinni_generated::AudioMixerApi::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)updateVolume:(int32_t)ssrc
              volume:(float)volume {
    try {
        _cppRefHandle.get()->UpdateVolume(::djinni::I32::toCpp(ssrc),
                                          ::djinni::F32::toCpp(volume));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)addSource:(nonnull PYAMixerSource *)source {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->AddSource(::djinni_generated::MixerSource::toCpp(source));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)removeSource:(int32_t)ssrc {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->RemoveSource(::djinni::I32::toCpp(ssrc));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable void *)nativeMixer {
    try {
        return _cppRefHandle.get().get();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AudioMixerApi::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AudioMixerApi::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<PYAAudioMixerApi>(cpp);
}

}  // namespace djinni_generated

@end
