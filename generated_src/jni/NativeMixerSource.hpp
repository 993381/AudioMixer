// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_mixer.djinni

#pragma once

#include "djinni_support.hpp"
#include "mixer_source.hpp"

namespace djinni_generated {

class NativeMixerSource final {
public:
    using CppType = ::audio_mixer::MixerSource;
    using JniType = jobject;

    using Boxed = NativeMixerSource;

    ~NativeMixerSource();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeMixerSource();
    friend ::djinni::JniClass<NativeMixerSource>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/github/piasy/audio_mixer/MixerSource") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(IIFLjava/lang/String;II)V") };
    const jfieldID field_mType { ::djinni::jniGetFieldID(clazz.get(), "mType", "I") };
    const jfieldID field_mSsrc { ::djinni::jniGetFieldID(clazz.get(), "mSsrc", "I") };
    const jfieldID field_mVolume { ::djinni::jniGetFieldID(clazz.get(), "mVolume", "F") };
    const jfieldID field_mPath { ::djinni::jniGetFieldID(clazz.get(), "mPath", "Ljava/lang/String;") };
    const jfieldID field_mSampleRate { ::djinni::jniGetFieldID(clazz.get(), "mSampleRate", "I") };
    const jfieldID field_mChannelNum { ::djinni::jniGetFieldID(clazz.get(), "mChannelNum", "I") };
};

}  // namespace djinni_generated
